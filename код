import pygame
import random

# Константы
WIDTH, HEIGHT = 300, 600
BLOCK_SIZE = 30
COLUMNS, ROWS = WIDTH // BLOCK_SIZE, HEIGHT // BLOCK_SIZE
FPS = 10

# Цвета
COLORS = [(0, 0, 0), (255, 0, 0), (0, 255, 0), (0, 0, 255), (255, 255, 0), (255, 165, 0), (128, 0, 128)]

# Фигуры
SHAPES = [
    [[1, 1, 1, 1]],
    [[1, 1], [1, 1]],
    [[0, 1, 0], [1, 1, 1]],
    [[1, 1, 0], [0, 1, 1]],
    [[0, 1, 1], [1, 1, 0]],
    [[1, 1, 1], [0, 0, 1]],
    [[1, 1, 1], [1, 0, 0]]
]

class Tetrimino:
    def init(self):
        self.shape = random.choice(SHAPES)
        self.color = random.randint(1, len(COLORS) - 1)
        self.x, self.y = COLUMNS // 2 - len(self.shape[0]) // 2, 0

    def rotate(self):
        self.shape = [list(row) for row in zip(*self.shape[::-1])]

def check_collision(grid, shape, offset):
    off_x, off_y = offset
    for y, row in enumerate(shape):
        for x, cell in enumerate(row):
            if cell and (x + off_x < 0 or x + off_x >= COLUMNS or y + off_y >= ROWS or grid[y + off_y][x + off_x]):
                return True
    return False

def clear_rows(grid):
    full_rows = [row for row in range(ROWS) if all(grid[row])]
    for row in full_rows:
        del grid[row]
        grid.insert(0, [0] * COLUMNS)
    return len(full_rows)

def draw_grid(screen, grid):
    for y, row in enumerate(grid):
        for x, cell in enumerate(row):
            pygame.draw.rect(screen, COLORS[cell], (x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE), 0 if cell else 1)

def main():
    pygame.init()
    screen = pygame.display.set_mode((WIDTH, HEIGHT))
    clock = pygame.time.Clock()
    grid = [[0] * COLUMNS for _ in range(ROWS)]
    tetrimino = Tetrimino()
    running = True

    while running:
        screen.fill((0, 0, 0))
        draw_grid(screen, grid)
        
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    if not check_collision(grid, tetrimino.shape, (tetrimino.x - 1, tetrimino.y)):
                        tetrimino.x -= 1
                elif event.key == pygame.K_RIGHT:
                    if not check_collision(grid, tetrimino.shape, (tetrimino.x + 1, tetrimino.y)):
                        tetrimino.x += 1
                elif event.key == pygame.K_DOWN:
                    if not check_collision(grid, tetrimino.shape, (tetrimino.x, tetrimino.y + 1)):
                        tetrimino.y += 1
                elif event.key == pygame.K_UP:
                    rotated = [list(row) for row in zip(*tetrimino.shape[::-1])]
                    if not check_collision(grid, rotated, (tetrimino.x, tetrimino.y)):
                        tetrimino.shape = rotated
        
        if not check_collision(grid, tetrimino.shape, (tetrimino.x, tetrimino.y + 1)):
            tetrimino.y += 1
        else:
            for y, row in enumerate(tetrimino.shape):
                for x, cell in enumerate(row):
                    if cell:
                        grid[tetrimino.y + y][tetrimino.x + x] = tetrimino.color
            clear_rows(grid)
            tetrimino = Tetrimino()
            if check_collision(grid, tetrimino.shape, (tetrimino.x, tetrimino.y)):
                running = False  # Конец игры
        
        for y, row in enumerate(tetrimino.shape):
            for x, cell in enumerate(row):
                if cell:
                    pygame.draw.rect(screen, COLORS[tetrimino.color], ((tetrimino.x + x) * BLOCK_SIZE, (tetrimino.y + y) * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE))
        
        pygame.display.flip()
        clock.tick(FPS)
    
    pygame.quit()

if name == "main":
    main()